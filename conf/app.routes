# microservice specific routes

GET         /assets/*file                                       controllers.Assets.at(path="/public", file)

GET         /unauthorized                                       controllers.SecurityController.unauthorized()

GET         /                                                   controllers.IndexController.get()
GET         /queues                                             controllers.Default.redirect(to = controllers.routes.MyCasesController.myCases.url)
GET         /queues/my-cases                                    controllers.MyCasesController.myCases()
GET         /queues/assigned                                    controllers.AssignedCasesController.assignedCases()
GET         /queues/assigned/:assigneeId/:tabIndex              controllers.AssignedCasesController.assignedCasesFor(assigneeId: String, tabIndex : Int)
GET         /queues/:slug                                       controllers.QueuesController.queue(slug: String, caseType: Option[String] ?= None)

GET         /reports                                            controllers.ReportingController.getReports
GET         /reports/:name/:tabIndex                            controllers.ReportingController.getReportCriteria(name: String, tabIndex : Int)
POST        /reports/:name                                      controllers.ReportingController.getReport(name: String)

GET         /cases                                              controllers.Default.redirect(to = controllers.routes.IndexController.get.url)
GET         /cases/:reference                                   controllers.CaseController.get(reference: String)
GET         /cases/:reference/sample                            controllers.CaseController.sampleDetails(reference: String)

GET         /cases/:reference/release                           controllers.ReleaseCaseController.releaseCase(reference: String)
POST        /cases/:reference/release                           controllers.ReleaseCaseController.releaseCaseToQueue(reference: String)
GET         /cases/:reference/release/confirmation              controllers.ReleaseCaseController.confirmReleaseCase(reference: String)

GET         /cases/:reference/assign                            controllers.AssignCaseController.get(reference: String)
POST        /cases/:reference/assign                            controllers.AssignCaseController.post(reference: String)

GET         /cases/:reference/reassign-case                     controllers.ReassignCaseController.showAvailableQueues(reference: String, origin: String)
POST        /cases/:reference/reassign-case                     controllers.ReassignCaseController.reassignCase(reference: String, origin: String)
GET         /cases/:reference/reassign-case/confirmation        controllers.ReassignCaseController.confirmReassignCase(reference: String, origin: String)

GET         /cases/:reference/refer                             controllers.ReferCaseController.getReferCase(reference: String)
POST        /cases/:reference/refer                             controllers.ReferCaseController.postReferCase(reference: String)
GET         /cases/:reference/refer/confirmation                controllers.ReferCaseController.confirmReferCase(reference: String)

GET         /cases/:reference/reject                            controllers.RejectCaseController.getRejectCase(reference: String)
POST        /cases/:reference/reject                            controllers.RejectCaseController.postRejectCase(reference: String)
GET         /cases/:reference/reject/confirmation               controllers.RejectCaseController.confirmRejectCase(reference: String)

GET         /cases/:reference/suspend                           controllers.SuspendCaseController.getSuspendCase(reference: String)
POST        /cases/:reference/suspend                           controllers.SuspendCaseController.postSuspendCase(reference: String)
GET         /cases/:reference/suspend/confirmation              controllers.SuspendCaseController.confirmSuspendCase(reference: String)


GET         /cases/:reference/suppress                          controllers.SuppressCaseController.getSuppressCase(reference: String)
POST        /cases/:reference/suppress                          controllers.SuppressCaseController.postSuppressCase(reference: String)
GET         /cases/:reference/suppress/confirmation             controllers.SuppressCaseController.confirmSuppressCase(reference: String)

POST        /cases/:reference/reopen                            controllers.ReopenCaseController.confirmReopenCase(reference: String)

GET         /cases/:reference/complete                          controllers.CompleteCaseController.completeCase(reference: String)
POST        /cases/:reference/complete                          controllers.CompleteCaseController.postCompleteCase(reference: String)
GET         /cases/:reference/complete/confirmation             controllers.CompleteCaseController.confirmCompleteCase(reference: String)

GET         /cases/:reference/ruling                            controllers.CaseController.rulingDetails(reference: String)
GET         /cases/:reference/ruling/edit                       controllers.RulingController.editRulingDetails(reference: String)
GET         /cases/:reference/ruling/edit-validate              controllers.RulingController.validateBeforeComplete(reference: String)
POST        /cases/:reference/ruling                            controllers.RulingController.updateRulingDetails(reference: String)
GET         /cases/:reference/ruling/cancel                     controllers.CancelRulingController.getCancelRuling(reference: String)
POST        /cases/:reference/ruling/cancel                     controllers.CancelRulingController.postCancelRuling(reference: String)
GET         /cases/:reference/ruling/cancel/confirmation        controllers.CancelRulingController.confirmCancelRuling(reference: String)

GET         /cases/:reference/activity                          controllers.CaseController.activityDetails(reference: String)
POST        /cases/:reference/activity                          controllers.CaseController.addNote(reference: String)

GET         /cases/:reference/attachments                       controllers.CaseController.attachmentsDetails(reference: String)

GET         /cases/:reference/keywords                          controllers.CaseController.keywordsDetails(reference: String)
POST        /cases/:reference/keywords                          controllers.CaseController.addKeyword(reference: String)

GET         /cases/:reference/change-case-status                controllers.ChangeCaseStatusController.onPageLoad(reference: String)
POST        /cases/:reference/change-case-status                controllers.ChangeCaseStatusController.onSubmit(reference: String)

GET         /cases/:reference/release-or-suppress-case          controllers.ReleaseOrSuppressCaseController.onPageLoad(reference: String)
POST        /cases/:reference/release-or-suppress-case          controllers.ReleaseOrSuppressCaseController.onSubmit(reference: String)

GET         /cases/:reference/appeal                            controllers.AppealCaseController.appealDetails(reference: String)

GET         /cases/:reference/new-appeal                        controllers.AppealCaseController.chooseType(reference: String)
POST        /cases/:reference/new-appeal                        controllers.AppealCaseController.confirmType(reference: String)

GET         /cases/:reference/new-appeal/:appealType            controllers.AppealCaseController.chooseStatus(reference: String, appealType: String)
POST        /cases/:reference/new-appeal/:appealType            controllers.AppealCaseController.confirmStatus(reference: String, appealType: String)

GET         /cases/:reference/change-appeal/:appealId           controllers.AppealCaseController.changeStatus(reference: String, appealId: String)
POST        /cases/:reference/change-appeal/:appealId           controllers.AppealCaseController.confirmChangeStatus(reference: String, appealId: String)

GET         /cases/:reference/sample/status                     controllers.SampleController.chooseStatus(reference: String, options: Option[String])
POST        /cases/:reference/sample/status                     controllers.SampleController.updateStatus(reference: String, options: Option[String])

GET         /cases/:reference/sample/return-status              controllers.SampleReturnController.chooseStatus(reference: String)
POST        /cases/:reference/sample/return-status              controllers.SampleReturnController.updateStatus(reference: String)

GET         /cases/:reference/extended-use/status               controllers.ExtendedUseCaseController.chooseStatus(reference: String)
POST        /cases/:reference/extended-use/status               controllers.ExtendedUseCaseController.updateStatus(reference: String)

GET         /search                                             controllers.SearchController.search(selectedTab: views.SearchTab.SearchTab ?= views.SearchTab.DETAILS,addToSearch: Option[Boolean] ?= None, reference: Option[String] ?= None, search: Search ?= Search(), sort: Sort ?= Sort(), page: Int ?= 1)

GET         /new-liability                                      controllers.CreateLiabilityController.get()
POST        /new-liability                                      controllers.CreateLiabilityController.post()

GET         /new-correspondence                                 controllers.CreateCorrespondenceController.get()
POST        /new-correspondence                                 controllers.CreateCorrespondenceController.post()
GET         /release-correspondence-choice                      controllers.CreateCorrespondenceController.displayQuestion(reference: String)
POST        /release-correspondence-choice                      controllers.CreateCorrespondenceController.postChoice(reference: String)
GET         /new-correspondence-confirm                         controllers.CreateCorrespondenceController.displayConfirmation(reference: String)

GET         /cases/v2/:reference/correspondence/edit-case-details       controllers.CreateCorrespondenceController.editCorrespondence(reference: String)
POST        /cases/v2/:reference/correspondence/edit-case-details       controllers.CreateCorrespondenceController.postCorrespondenceDetails(reference: String)
GET         /cases/v2/:reference/correspondence/edit-trader-details     controllers.CreateCorrespondenceController.editCorrespondenceContact(reference: String)
POST        /cases/v2/:reference/correspondence/edit-trader-details     controllers.CreateCorrespondenceController.postCorrespondenceContact(reference: String)

# Note: Browser links can't send a DELETE so it has to be GET in this case
GET         /cases/:reference/keywords/:keyword                 controllers.CaseController.removeKeyword(reference: String, keyword: String)

GET         /pdf/ruling/:reference                              controllers.PdfDownloadController.getRulingPdf(reference: String)
GET         /pdf/application/:reference                         controllers.PdfDownloadController.applicationPdf(reference: String)

GET         /attachment/:reference/:id                          controllers.ViewAttachmentController.get(reference: String, id: String)

# v2
GET         /cases/v2/:reference/atar                           controllers.v2.AtarController.displayAtar(reference: String)

GET         /cases/v2/:reference/liability                      controllers.v2.LiabilityController.displayLiability(reference: String)

GET         /cases/v2/:reference/liability/edit-details         controllers.v2.LiabilityController.editLiabilityDetails(reference: String)
POST        /cases/v2/:reference/liability/edit-details         controllers.v2.LiabilityController.postLiabilityDetails(reference: String)

POST        /cases/v2/:reference/attachments                    controllers.v2.AttachmentsController.uploadAttachment(reference: String)
GET         /cases/v2/:reference/attachments/remove             controllers.v2.AttachmentsController.removeAttachment(reference: String, fileId: String, fileName: String)
POST        /cases/v2/:reference/attachments/remove             controllers.v2.AttachmentsController.confirmRemoveAttachment(reference: String, fileId: String, fileName: String)

GET         /cases/v2/:reference/correspondence                 controllers.v2.CorrespondenceController.displayCorrespondence(reference: String)
POST        /cases/v2/:reference/correspondence                 controllers.CaseController.addMessage(reference: String)

GET         /cases/v2/:reference/miscellaneous                  controllers.v2.MiscellaneousController.displayMiscellaneous(reference: String)

GET        /cases/cache/:reference/:itemType                    controllers.TabCacheController.get(reference: String, itemType: ApplicationType)
POST       /cases/cache/:reference/:itemType                    controllers.TabCacheController.post(reference: String, itemType: ApplicationType)

GET        /operator-dashboard-classification                   controllers.OperatorDashboardController.onPageLoad


GET        /my-cases                                            controllers.v2.MyCasesController.displayMyCases(activeSubNav: SubNavigationTab ?= AssignedToMeTab)
GET        /gateway-cases                                       controllers.v2.GatewayCasesController.displayGatewayCases

GET        /all-open-cases                                      controllers.v2.AllOpenCasesController.displayAllOpenCases(activeSubNav: SubNavigationTab ?= ATaRTab)

GET         /create-new-miscellaneous                           controllers.CreateMiscellaneousController.get()
POST        /create-new-miscellaneous                           controllers.CreateMiscellaneousController.post()

GET         /team-miscellaneous-choice                          controllers.CreateMiscellaneousController.displayQuestion(reference: String)

GET         /new-miscellaneous-confirm                          controllers.CreateMiscellaneousController.displayConfirmation(reference: String)

GET         /cases/v2/:reference/miscellaneous/edit-case-details       controllers.CreateMiscellaneousController.editMiscDetails(reference: String)
POST        /cases/v2/:reference/miscellaneous/edit-case-details       controllers.CreateMiscellaneousController.postMiscDetails(reference: String)

GET         /manager-tools                                       controllers.v2.ManagerToolsController.displayManagerTools(activeSubNav: SubNavigationTab ?= ManagerToolsReportsTab)

GET        /users/user/:pid/user-edit-team                       controllers.v2.ManageUserController.editUserTeamDetails(pid: String)
POST       /users/user/:pid/user-edit-team                       controllers.v2.ManageUserController.postEditUserTeams(pid: String)
GET        /users/manage-users                                   controllers.v2.ManageUserController.displayManageUsers()
GET        /users/user/:pid                                      controllers.v2.ManageUserController.displayUserDetails(pid: String, activeSubNav: SubNavigationTab ?= ManagerToolsUsersTab)
GET        /users/user-delete/:pid                               controllers.v2.ManageUserController.deleteUser(pid: String, activeSubNav: SubNavigationTab ?= ManagerToolsUsersTab)
POST       /users/user-delete/:pid                               controllers.v2.ManageUserController.confirmRemoveUser(pid: String)
GET        /users/user-delete-done                               controllers.v2.ManageUserController.doneDeleteUser(userName: String, activeSubNav: SubNavigationTab ?= ManagerToolsUsersTab)

GET        /keywords/manage-keywords                             controllers.v2.ManageKeywordsController.displayManageKeywords()
GET        /keywords/keyword-create                              controllers.v2.ManageKeywordsController.newKeyword()
POST       /keywords/keyword-create                              controllers.v2.ManageKeywordsController.createKeyword()
GET        /keywords/keyword-create-done                         controllers.v2.ManageKeywordsController.displayConfirmKeyword(saveKeyword: String)

GET        /keywords/keyword-:reference                          controllers.v2.ManageKeywordsController.changeKeywordStatus(reference: String)