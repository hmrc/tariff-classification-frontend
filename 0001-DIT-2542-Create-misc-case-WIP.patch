From 243da1a748c39d8a99416aae77659673c1bd4df9 Mon Sep 17 00:00:00 2001
From: "emilia.trendafilova"
 <20456486+emilia-trendafilova@users.noreply.github.com>
Date: Fri, 18 Dec 2020 14:44:42 +0000
Subject: [PATCH 1/3] DIT-2542: Create misc case WIP

---
 .../CreateMiscellaneousController.scala       | 62 +++++++++++++++
 app/models/Application.scala                  |  3 +
 app/models/forms/v2/MiscellaneousForm.scala   | 52 +++++++++++++
 app/views/v2/create_misc.scala.html           | 76 +++++++++++++++++++
 conf/app.routes                               |  4 +
 conf/messages                                 | 13 ++++
 6 files changed, 210 insertions(+)
 create mode 100644 app/controllers/CreateMiscellaneousController.scala
 create mode 100644 app/models/forms/v2/MiscellaneousForm.scala
 create mode 100644 app/views/v2/create_misc.scala.html

diff --git a/app/controllers/CreateMiscellaneousController.scala b/app/controllers/CreateMiscellaneousController.scala
new file mode 100644
index 00000000..c449dfd0
--- /dev/null
+++ b/app/controllers/CreateMiscellaneousController.scala
@@ -0,0 +1,62 @@
+/*
+ * Copyright 2020 HM Revenue & Customs
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package controllers
+
+import config.AppConfig
+import javax.inject.Inject
+import models.{Case, MiscApplication, Permission}
+import models.forms.v2.MiscellaneousForm
+import play.api.data.Form
+import play.api.i18n.I18nSupport
+import play.api.mvc.MessagesControllerComponents
+import service.{CasesService, QueuesService}
+import uk.gov.hmrc.play.bootstrap.frontend.controller.FrontendController
+import play.api.mvc._
+
+import scala.concurrent.ExecutionContext.Implicits.global
+
+import scala.concurrent.Future
+
+
+class CreateMiscellaneousController @Inject()(
+                                                 verify: RequestActions,
+                                                 casesService: CasesService,
+                                                 queueService: QueuesService,
+                                                 mcc: MessagesControllerComponents,
+                                                 implicit val appConfig: AppConfig
+                                               ) extends FrontendController(mcc)  with I18nSupport {
+
+  private val form: Form[MiscApplication] = MiscellaneousForm.newMiscForm
+
+  def get(): Action[AnyContent] = (verify.authenticated andThen verify.mustHave(Permission.CREATE_CASES)).async {
+    implicit request: Request[AnyContent] =>
+      Future.successful(Ok(views.html.v2.create_misc(form)))
+  }
+
+//  def post(): Action[AnyContent] = (verify.authenticated andThen verify.mustHave(Permission.CREATE_CASES)).async {
+//    implicit request =>
+//      form.bindFromRequest.fold(
+//        formWithErrors => Future.successful(Ok(views.html.v2.create_misc(formWithErrors))),
+//        miscApp =>
+//          casesService.createCase(miscApp, request.operator).map { caseCreated: Case =>
+//            Redirect(routes.CreateMiscellaneousController.displayQuestion(caseCreated.reference))
+//          }
+//      )
+//
+//  }
+
+}
\ No newline at end of file
diff --git a/app/models/Application.scala b/app/models/Application.scala
index 5392c6ce..60a853a9 100644
--- a/app/models/Application.scala
+++ b/app/models/Application.scala
@@ -56,6 +56,7 @@ sealed trait Application {
     `type` match {
       case ApplicationType.ATAR      => Some(asATAR.holder.businessName)
       case ApplicationType.LIABILITY => Some(asLiabilityOrder.traderName)
+      case ApplicationType.MISCELLANEOUS => asMisc.contactName
       case _                         => None
     }
 
@@ -63,6 +64,8 @@ sealed trait Application {
     `type` match {
       case ApplicationType.ATAR             => asATAR.goodName
       case ApplicationType.LIABILITY => asLiabilityOrder.goodName.getOrElse("")
+      case ApplicationType.MISCELLANEOUS => asMisc.detailedDescription.getOrElse("")
+
     }
 
   def getType: String =
diff --git a/app/models/forms/v2/MiscellaneousForm.scala b/app/models/forms/v2/MiscellaneousForm.scala
new file mode 100644
index 00000000..2759d13b
--- /dev/null
+++ b/app/models/forms/v2/MiscellaneousForm.scala
@@ -0,0 +1,52 @@
+/*
+ * Copyright 2020 HM Revenue & Customs
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package models.forms.v2
+
+import models.MiscCaseType.MiscCaseType
+import models.{Contact, MiscApplication, MiscCaseType}
+import play.api.data.Form
+import play.api.data.Forms._
+import models.forms.mappings.FormMappings._
+
+object MiscellaneousForm {
+
+  private val form2Misc: (String, String, MiscCaseType) => MiscApplication = {
+    case (shortDescr, contactName, typeMisc ) =>
+      MiscApplication(
+        contact = Contact("", contactName, None),
+        offline = false,
+        name = "",
+        contactName = Some(contactName),
+        caseType = typeMisc,
+        detailedDescription = Some(shortDescr),
+        sampleToBeProvided = false,
+        sampleToBeReturned = false,
+        messagesLogged = List.empty
+      )
+  }
+
+    private val misc2Form: MiscApplication => Option[(String, String, MiscCaseType)] = misc =>
+      Some((misc.detailedDescription.getOrElse(""), misc.contactName.getOrElse(""), misc.caseType))
+
+    val newMiscForm: Form[MiscApplication] = ???
+//      mapping(
+//        "detailedDescription"       -> textNonEmpty("Please enter a short case description"),
+//        "contactName"      -> textNonEmpty("Please enter a case contact name"),
+//        "caseType" -> oneOf("status.change.cancel.reason.error", MiscCaseType),
+//      )(form2Misc)(misc2Form)
+//    )
+}
\ No newline at end of file
diff --git a/app/views/v2/create_misc.scala.html b/app/views/v2/create_misc.scala.html
new file mode 100644
index 00000000..6839e793
--- /dev/null
+++ b/app/views/v2/create_misc.scala.html
@@ -0,0 +1,76 @@
+@*
+ * Copyright 2020 HM Revenue & Customs
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *@
+
+@import config.AppConfig
+@import controllers.routes
+@import views.forms.components.RadioOption
+@import views.html.forms.components.input_radiogroup
+@import views.html.includes.main
+@import models.LiabilityOrder
+@import views.html.components.confirm_or_cancel_buttons
+@import views.html.forms.components.input_text
+@import models.LiabilityStatus
+@import views.html.partials.error_summary
+
+@(form: Form[MiscApplication])(implicit request: Request[_], messages: Messages, appConfig: AppConfig)
+
+@main(bodyClasses = None, customTitle = Some(messages("page.title.create_misc.h1"))) {
+
+@error_summary(form.errors)
+
+<h1 id="create_misc-heading" class="heading-xlarge">@messages("page.title.create_misc.h1")</h1>
+
+@helper.form(action = routes.CreateMiscellaneousController.post(), 'id -> "create_misc-form", 'novalidate -> "novalidate") {
+@helper.CSRF.formField
+    @input_text(
+        field = form("shortDescr"),
+        label = messages("misc.create_misc.description.heading"),
+        labelClass = Some("form-label bold"),
+        formControlClass = Some("w-50")
+    )
+
+    @input_text(
+        field = form("contactName"),
+        label = messages("misc.create_misc.contact.name.heading"),
+        labelClass = Some("form-label bold"),
+        formControlClass = Some("w-50"),
+    )
+
+    @input_radiogroup(
+        field = form("typeMisc"),
+        label = Some(messages("misc.create_misc.type.heading")),
+        labelClass = Some("heading-large"),
+        options = Seq(
+                RadioOption(MiscCaseType.HARMONISED.toString, messages("misc.create_misc.radio.type-harmonised")),
+                RadioOption(MiscCaseType.IB.toString, messages("misc.create_misc.radio.type-ib")),
+                RadioOption(MiscCaseType.NOMENCLATURE.toString, messages("misc.create_misc.radio.type-nc")),
+                RadioOption(MiscCaseType.OTHER_GOVT_DEP.toString, messages("misc.create_misc.radio.type-other-gov-dep")),
+                RadioOption(MiscCaseType.OTHER.toString, messages("misc.create_misc.radio.type-other"))
+
+            ),
+        id = "create_liability-typeMisc",
+        customGroupId = Some("typeMisc")
+        )
+    )
+
+    @confirm_or_cancel_buttons(
+        id = "create_liability",
+        confirmText = messages("misc.create_misc.confirm-button"),
+        cancelText = messages("liability.create_liability.cancel-button"),
+        cancelHref = routes.IndexController.get()
+        )
+    }
+}
\ No newline at end of file
diff --git a/conf/app.routes b/conf/app.routes
index 6d4e7f42..eac3ec7f 100644
--- a/conf/app.routes
+++ b/conf/app.routes
@@ -140,3 +140,7 @@ GET        /my-cases                                            controllers.v2.M
 GET        /gateway-cases                                       controllers.v2.GatewayCasesController.displayGatewayCases
 
 GET        /all-open-cases                                      controllers.v2.AllOpenCasesController.displayAllOpenCases(activeSubNav: SubNavigationTab ?= ATaRTab)
+
+GET         /new-miscellaneous                                  controllers.CreateMiscellaneousController.get()
+POST        /new-miscellaneous                                  controllers.CreateMiscellaneousController.post()
+
diff --git a/conf/messages b/conf/messages
index 125082ec..c80d0a2a 100644
--- a/conf/messages
+++ b/conf/messages
@@ -428,6 +428,7 @@ page.title.ruling.not.found=Ruling not found
 page.title.case.queues=Tariff classification case queues
 page.title.create_liability.h1=New liability information
 page.title.edit_liability_decision=Edit liability decision
+page.title.create_misc.h1=Create miscellaneous case
 page.title.document.not.found=Document not found
 view.attachment.unavailable.title=Attachment unavailable
 view.attachment.unavailable.heading=Attachment is unavailable
@@ -958,3 +959,15 @@ applicationTab.referredByMe = Referred by me
 applicationTab.completedByMe = Completed by me
 applicationTab.gateway = Gateway cases
 
+misc.create_misc.description.heading=Short case description
+misc.create_misc.contact.name.heading=Case contact name
+misc.create_misc.type.heading=Choose a case type
+misc.create_misc.radio.type-harmonised=HARMONISED
+misc.create_misc.radio.type-ib=IB
+misc.create_misc.radio.type-nomenclature=NC
+misc.create_misc.radio.type-other-gov-dep=Other government department
+misc.create_misc.radio.type-other=Other
+misc.create_misc.confirm-button=Create case
+
+
+
-- 
2.19.1

